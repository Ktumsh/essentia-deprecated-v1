---
interface Props {
  videoId: string;
  title?: string;
  backgroundImage?: string;
}

const { videoId, title, backgroundImage } = Astro.props;
---

<lite-youtube
  class="rounded-lg"
  videoid={videoId}
  tabindex="0"
  aria-label="button"
  style={`background-image: url('${backgroundImage || `https://i.ytimg.com/vi/${videoId}/maxresdefault.jpg`}');`}
>
  <button class="lty-playbtn" aria-label={title || "Play video"}>
    <span class="lyt-visually-hidden">{title || "Play video"}</span>
  </button>
</lite-youtube>

<script is:inline>
  (function () {
    if (customElements.get("lite-youtube")) {
      return;
    }

    class LiteYTEmbed extends HTMLElement {
      connectedCallback() {
        const video = this.getAttribute("videoid").split("?");
        this.videoId = video[0];
        this.short = video[1];

        let playBtnEl = this.querySelector(".lty-playbtn");
        this.playLabel =
          (playBtnEl && playBtnEl.textContent.trim()) ||
          this.getAttribute("playlabel") ||
          "Reproducir presentación de La Velada del Año";

        this.dataset.title = this.getAttribute("title") || "";

        if (!this.style.backgroundImage) {
          this.style.backgroundImage = `url("https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg")`;
          this.upgradePosterImage();
        }

        // Set up play button, and its visually hidden label
        if (!playBtnEl) {
          playBtnEl = document.createElement("button");
          playBtnEl.type = "button";
          playBtnEl.classList.add("lty-playbtn");
          this.append(playBtnEl);
        }
        if (!playBtnEl.textContent) {
          const playBtnLabelEl = document.createElement("span");
          playBtnLabelEl.className = "lyt-visually-hidden";
          playBtnLabelEl.textContent = this.playLabel;
          playBtnEl.append(playBtnLabelEl);
        }

        this.addNoscriptIframe();

        this.addEventListener("pointerover", LiteYTEmbed.warmConnections, {
          once: true,
        });

        this.addEventListener("click", this.activate.bind(this));

        this.addEventListener("keydown", this.handleKeyPress.bind(this));

        this.needsYTApi =
          this.hasAttribute("js-api") ||
          navigator.vendor.includes("Apple") ||
          navigator.userAgent.includes("Mobi");
      }

      static addPrefetch(kind, url, as) {
        const linkEl = document.createElement("link");
        linkEl.rel = kind;
        linkEl.href = url;
        if (as) {
          linkEl.as = as;
        }
        document.head.append(linkEl);
      }

      static warmConnections() {
        if (LiteYTEmbed.preconnected) return;

        LiteYTEmbed.addPrefetch(
          "preconnect",
          "https://www.youtube-nocookie.com"
        );

        LiteYTEmbed.addPrefetch("preconnect", "https://www.google.com");

        LiteYTEmbed.addPrefetch(
          "preconnect",
          "https://googleads.g.doubleclick.net"
        );
        LiteYTEmbed.addPrefetch("preconnect", "https://static.doubleclick.net");

        LiteYTEmbed.preconnected = true;
      }

      fetchYTPlayerApi() {
        if (window.YT || (window.YT && window.YT.Player)) return;

        /* global YT */
        this.ytApiPromise = new Promise((resolve, reject) => {
          const el = document.createElement("script");
          el.src = "https://www.youtube.com/iframe_api";
          el.async = true;
          el.onload = (_) => {
            YT.ready(resolve);
          };
          el.onerror = reject;
          document.head.append(el);
        });
      }

      /** Return the YT Player API instance. (Public L-YT-E API) */
      async getYTPlayer() {
        if (!this.playerPromise) {
          await this.activate();
        }

        return this.playerPromise;
      }

      async addYTPlayerIframe() {
        this.fetchYTPlayerApi();
        await this.ytApiPromise;

        const videoPlaceholderEl = document.createElement("div");
        this.append(videoPlaceholderEl);

        const paramsObj = Object.fromEntries(this.getParams().entries());

        this.playerPromise = new Promise((resolve) => {
          const player = new YT.Player(videoPlaceholderEl, {
            width: "100%",
            videoId: this.videoId,
            playerVars: paramsObj,
            events: {
              onReady: (event) => {
                event.target.playVideo();
                resolve(player);
              },
            },
          });
        });
      }

      addNoscriptIframe() {
        const iframeEl = this.createBasicIframe();
        const noscriptEl = document.createElement("noscript");

        noscriptEl.innerHTML = iframeEl.outerHTML;
        this.append(noscriptEl);
      }

      getParams() {
        const params = new URLSearchParams(this.getAttribute("params") || []);
        params.append("autoplay", "1");
        params.append("playsinline", "1");
        params.append("color", "white");
        return params;
      }

      async activate(event) {
        if (this.classList.contains("lyt-activated")) return;
        const playBtnEl = this.querySelector(".lty-playbtn");
        if (playBtnEl && playBtnEl.hasAttribute("href")) {
          playBtnEl.removeAttribute("href");
        }
        this.classList.add("lyt-activated");

        if (this.style.backgroundImage !== "unset") {
          this.style.backgroundImage = "unset";
        }

        if (this.needsYTApi) {
          return this.addYTPlayerIframe(this.getParams());
        }

        const iframeEl = this.createBasicIframe();
        this.append(iframeEl);

        // Set focus for a11y
        iframeEl.focus();

        // Prevent default action (navigation to YouTube)
        if (event) {
          event.preventDefault();
        }
      }

      handleKeyPress(event) {
        if (event.code === "Enter" || event.code === "Space") {
          event.preventDefault();
          this.activate(event);
        }
      }

      createBasicIframe() {
        const iframeEl = document.createElement("iframe");
        iframeEl.width = 560;
        iframeEl.height = 315;

        iframeEl.title = this.playLabel;
        iframeEl.allow =
          "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture";
        iframeEl.allowFullscreen = true;

        iframeEl.src = !this.short
          ? `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${this.getParams().toString()}`
          : `https://www.youtube.com/embed/${encodeURIComponent(this.videoId)}?${this.getParams().toString()}&${this.short}`;
        return iframeEl;
      }

      upgradePosterImage() {
        // Defer to reduce network contention.
        setTimeout(() => {
          const webpUrl = `https://i.ytimg.com/vi_webp/${this.videoId}/maxresdefault.webp`;
          const img = new Image();
          img.fetchPriority = "low"; // low priority to reduce network contention
          img.referrerpolicy = "origin";
          img.src = webpUrl;
          img.onload = (e) => {
            const noAvailablePoster =
              e.target.naturalHeight === 90 && e.target.naturalWidth === 120;
            if (noAvailablePoster) return;

            this.style.backgroundImage = `url("${webpUrl}")`;
          };
        }, 100);
      }
    }

    customElements.define("lite-youtube", LiteYTEmbed);
  })();
</script>

<style is:global>
  lite-youtube {
    contain: content;
    @apply relative block bg-center bg-cover aspect-video w-full h-auto transition-all duration-300 shadow-[0_0_15px_rgb(201,_53,_96,_0.5)] border-2 border-bittersweet-400 dark:border-cerise-red-600;
  }

  /* gradient */
  lite-youtube::before {
    content: attr(data-title);
    display: block;
    position: absolute;
    top: 0;
    /* Pixel-perfect port of YT's gradient PNG, using https://github.com/bluesmoon/pngtocss plus optimizations */
    background-image: linear-gradient(
      180deg,
      rgb(0 0 0 / 60%) 0%,
      rgb(0 0 0 / 54%) 14%,
      rgb(0 0 0 / 15%) 54%,
      rgb(0 0 0 / 5%) 72%,
      rgb(0 0 0 / 0%) 94%
    );
    height: 99px;
    width: 100%;
    font-family: "YouTube Noto", Roboto, Arial, Helvetica, sans-serif;
    color: hsl(0deg 0% 93.33%);
    text-shadow: 0 0 2px rgba(0, 0, 0, 0.5);
    font-size: 18px;
    padding: 25px 20px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    box-sizing: border-box;
  }

  lite-youtube:hover::before {
    color: white;
  }

  /* responsive iframe with a 16:9 aspect ratio
    thanks https://css-tricks.com/responsive-iframes/
*/
  lite-youtube::after {
    content: "";
    display: block;
    padding-bottom: calc(100% / (16 / 9));
  }
  lite-youtube > iframe {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    border: 0;
  }

  /* play button */
  lite-youtube > .lty-playbtn {
    display: block;
    /* Make the button element cover the whole area for a large hover/click target… */
    width: 100%;
    height: 100%;
    /* …but visually it's still the same size */
    background: no-repeat center/100px 100px;
    /* YT's actual play button svg */
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="white" d="M12 4c-4.41 0-8 3.59-8 8s3.59 8 8 8s8-3.59 8-8s-3.59-8-8-8M9.5 16.5v-9l7 4.5z" opacity=".3"/><path fill="white" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8"/><path fill="white" d="m9.5 16.5l7-4.5l-7-4.5z"/></svg>');
    position: absolute;
    cursor: pointer;
    z-index: 1;
    filter: grayscale(100%);
    transition:
      all 0.1s ease,
      filter 0.1s cubic-bezier(0, 0, 0.2, 1),
      transform 0.3s ease;
    border: 0;
  }

  lite-youtube:hover > .lty-playbtn,
  lite-youtube .lty-playbtn:focus {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="rgb(250, 128, 114)" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2M9.5 16.5v-9l7 4.5z"/></svg>');
    filter: none;
    transform: scale(1.23);
  }

  html.dark lite-youtube:hover > .lty-playbtn,
  html.dark lite-youtube .lty-playbtn:focus {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="rgb(201, 53, 96)" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2M9.5 16.5v-9l7 4.5z"/></svg>');
    filter: none;
    transform: scale(1.23);
  }

  @media (prefers-reduced-motion) {
    lite-youtube:hover > .lty-playbtn,
    lite-youtube .lty-playbtn:focus {
      transition: 0s;
      transform: scale(1);
    }
  }

  /* Post-click styles */
  lite-youtube.lyt-activated {
    cursor: unset;
  }
  lite-youtube.lyt-activated::before,
  lite-youtube.lyt-activated > .lty-playbtn {
    opacity: 0;
    pointer-events: none;
  }

  .lyt-visually-hidden {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }
</style>
