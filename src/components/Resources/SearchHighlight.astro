---
import Chevron from "@/icons/chevron.astro";
import ClearIcon from "@/icons/clear.astro";
import SearchIcon from "@/icons/search.astro";
---

<div
  class="hidden lg:flex sticky top-5 float-end items-center w-auto !mt-5 mr-5 z-10"
>
  <div class="relative flex w-80">
    <input
      type="text"
      id="searchBox"
      placeholder="Busca palabras clave"
      autocomplete="off"
      class="flex items-center justify-center w-full h-10 px-4 pr-28 leading-10 placeholder:text-sm placeholder:text-base-color-m dark:placeholder:text-base-color-dark-m focus:outline-none focus:ring-0 border-2 border-transparent focus:border-bittersweet-400 bg-bento-gradient dark:bg-none bg-white/50 dark:bg-base-dark-50 rounded-full shadow-md dark:focus:border-cerise-red-600 backdrop-blur-lg backdrop-saturate-150 transition"
    />
    <div
      id="searchIcon"
      class="absolute top-0 right-0 h-full flex items-center justify-center px-3 transition-transform"
    >
      <SearchIcon
        class="size-5 text-base-color-m dark:text-base-color-dark-m"
      />
    </div>
    <div
      id="buttons"
      class="absolute top-0 right-0 h-full flex items-center justify-center gap-2 px-2 opacity-0 transition-opacity pointer-events-none"
    >
      <button
        id="prevButton"
        class="flex items-center justify-center size-7 hover:bg-black/10 dark:hover:bg-white/10 rounded-full"
      >
        <Chevron
          class="size-5 rotate-90 text-base-color dark:text-base-color-dark"
        />
      </button>
      <button
        id="nextButton"
        class="flex items-center justify-center size-7 hover:bg-black/10 dark:hover:bg-white/10 rounded-full"
      >
        <Chevron
          class="size-5 -rotate-90 text-base-color dark:text-base-color-dark"
        />
      </button>
      <button
        id="clearButton"
        class="flex items-center justify-center size-7 hover:bg-black/10 dark:hover:bg-white/10 rounded-full"
      >
        <ClearIcon
          class="size-[14px] text-base-color dark:text-base-color-dark-m"
        />
      </button>
    </div>
  </div>
</div>

<script>
  import { $ } from "@/lib/dom-selector";

  let currentIndex = -1;
  let highlights: HTMLElement[] = [];

  function removeHighlights() {
    const content = $("#content");
    const elements = content?.querySelectorAll<HTMLElement>(".highlight");

    elements?.forEach((element) => {
      const parent = element.parentNode as HTMLElement;
      parent.replaceChild(
        document.createTextNode(element.textContent!),
        element
      );
      parent.normalize();
    });

    highlights = [];
    currentIndex = -1;
  }

  function handleSearch() {
    const searchBox = $("#searchBox") as HTMLInputElement;
    const searchText = searchBox.value.toLowerCase();
    const content = $("#content");
    const buttons = $("#buttons");
    const searchIcon = $("#searchIcon");

    searchText.trim() !== ""
      ? (searchIcon?.classList.add("!scale-0"),
        buttons?.classList.add("!opacity-100", "!pointer-events-auto"))
      : (searchIcon?.classList.remove("!scale-0"),
        buttons?.classList.remove("!opacity-100", "!pointer-events-auto"));

    removeHighlights();

    if (searchText.trim() === "") return;

    const elements = content?.querySelectorAll<HTMLElement>("*");

    elements?.forEach((element) => {
      element.childNodes.forEach((child) => {
        if (child.nodeType === Node.TEXT_NODE) {
          const text = child.textContent!;
          const regex = new RegExp(`(${searchText})`, "gi");
          const highlightedText = text.replace(
            regex,
            '<span class="highlight bg-yellow-500 text-black">$1</span>'
          );
          if (highlightedText !== text) {
            const span = document.createElement("span");
            span.innerHTML = highlightedText;
            child.replaceWith(span);
            highlights.push(span);
          }
        }
      });
    });
  }

  function scrollToHighlight(index: number) {
    if (highlights.length > 0 && index >= 0 && index < highlights.length)
      highlights[index].scrollIntoView({ behavior: "smooth", block: "center" });
  }

  function handlePrev() {
    if (currentIndex > 0) {
      currentIndex--;
      scrollToHighlight(currentIndex);
    }
  }

  function handleNext() {
    if (currentIndex < highlights.length - 1) {
      currentIndex++;
      scrollToHighlight(currentIndex);
    }
  }

  function handleClear() {
    const searchBox = $("#searchBox") as HTMLInputElement;
    const buttons = $("#buttons");
    const searchIcon = $("#searchIcon");
    searchIcon?.classList.remove("!scale-0");
    buttons?.classList.remove("!opacity-100", "!pointer-events-auto");
    searchBox.value = "";
    removeHighlights();
  }

  document.addEventListener("astro:page-load", () => {
    const searchBox = $("#searchBox") as HTMLInputElement;
    const clearButton = $("#clearButton");
    const prevButton = $("#prevButton");
    const nextButton = $("#nextButton");

    searchBox.addEventListener("input", handleSearch);
    clearButton?.addEventListener("click", handleClear);
    prevButton?.addEventListener("click", handlePrev);
    nextButton?.addEventListener("click", handleNext);
  });
</script>
