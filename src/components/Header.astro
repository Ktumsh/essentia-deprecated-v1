---
import { ThemeToggle } from "@/components/ThemeToggle/ThemeToggle.jsx";
import { MOBILE_MENU_CONTENT_ID } from "@/consts/mobile-menu";
import HamburgerButton from "./HamburgerButton.astro";

import Settings from "./Icons/Settings.astro";
import Help from "./Icons/Help.astro";
import User from "./Icons/User.astro";
import Community from "./Icons/Community.astro";
import Theme from "./Icons/Theme.astro";
import Logout from "./Icons/Logout.astro";

import { getSession } from "auth-astro/server";
import type { Session } from "auth-astro";
import AvatarDropdown from "./AvatarDropdown";

const session: Session | any = await getSession(Astro.request);

const getFirstNameAndLastName = (fullName: any) => {
  if (!fullName) return "Usuario";
  const nameParts = fullName.toLowerCase().split(" ");
  if (nameParts.length < 3) return capitalize(fullName);
  return `${capitalize(nameParts[0])} ${capitalize(nameParts[nameParts.length - 2])}`;
};

const capitalize = (word: string) => {
  return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
};

const normalizeName = getFirstNameAndLastName(session?.user?.name);
const hasUsername = session?.user?.username
  ? `@${session.user.username}`
  : session?.user?.email;

const { pathname } = Astro.url;
const normalizedPathName =
  pathname.length > 1 && pathname.endsWith("/")
    ? pathname.slice(0, -1)
    : pathname;

const pages = [
  {
    name: "Recursos",
    href: "/recursos",
    active: normalizedPathName.startsWith("/recursos"),
  },
  {
    name: "Noticias",
    href: "/noticias",
    active: "/noticias" === normalizedPathName,
  },
  {
    name: "Essentia AI",
    href: "/essentia-ai",
    active: "/essentia-ai" === normalizedPathName,
  },
  {
    name: "Recursos adicionales",
    href: "/adicionales",
    active: "/adicionales" === normalizedPathName,
  },
].map((page) => ({
  ...page,
  active: page.active ?? normalizedPathName === page.href,
}));
---

<header
  id="header"
  class="static flex justify-center top-0 left-0 right-0 gap-3 w-full z-50 shadow-md lg:shadow-none transition-transform duration-300 ease-in-out"
>
  <nav
    class="relative flex justify-between lg:justify-normal lg:gap-3 w-full lg:w-[1250px] min-h-16 lg:min-h-20 py-2 px-5 z-10 bg-white lg:bg-transparent dark:bg-wash-dark dark:lg:bg-transparent"
  >
    <div class="flex align-center">
      <a
        class="text-link dark:text-white/95 text-base font-grotesk font-normal active:scale-95 overflow-hidden transition-transform relative items-center rounded-full inline-flex gap-2"
        href="/"
        aria-label="Página de inicio"
      >
        <img
          class="w-10 h-10 flex dark:hidden origin-center transition-all ease-in-out"
          src="/e-logomark-on-light.webp"
          alt="Logo de Essentia"
        />
        <img
          class="w-10 h-10 hidden dark:flex origin-center transition-all ease-in-out"
          src="/e-logomark-on-dark.webp"
          alt="Logo de Essentia"
        />
        <span class="not-sr-only">Essentia®️</span>
      </a>
    </div>
    <HamburgerButton class:list={"block lg:hidden"} id="menuButton" />
    <div
      class="hidden lg:flex justify-around flex-1 items-center shadow-md px-4 md:px-8 rounded-xl text-sm font-normal text-link-h dark:text-link-dark-h bg-white dark:bg-wash-dark"
    >
      {
        pages.map(({ name, href, active }, key) => (
          <>
            <a
              id={`navbar_link_${key + 1}`}
              class="relative min-w-[20%] size-auto px-3 pointer-events-none navbar_link"
              href={href}
            >
              <span
                class:list={[
                  "active-bar relative pb-1 text-center pointer-events-auto hover:text-bittersweet-400 dark:hover:text-cerise-red-400",
                  { "current-page": active },
                  { "not-current": !active },
                ]}
              >
                {name}
              </span>
            </a>
          </>
        ))
      }
    </div>
    <div
      class="hidden lg:flex justify-around items-center shadow-md rounded-xl text-sm font-normal text-gray-500 dark:text-link-dark-h bg-white dark:bg-wash-dark"
    >
      <a
        class="flex flex-row text-nowrap relative size-auto px-6 pointer-events-none"
        href="#"
      >
        <span
          class="flex items-center relative px-4 h-8 text-center pointer-events-auto rounded-full text-white bg-bittersweet-400 dark:bg-cerise-red-800 hover:brightness-90 transition-[filter] duration-200"
        >
          Comunidad
          <i class="ml-1 fa-solid fa-comments"></i>
        </span>
      </a>
      <div
        role="separator"
        class="h-14 border-r border-shark-100 dark:border-wash-full-dark"
      >
      </div>
      <div class="flex items-center justify-center size-full px-6">
        {
          session?.user?.image ? (
            <AvatarDropdown
              avatarUrl={session?.user?.image}
              name={normalizeName}
              username={hasUsername}
              client:visible
            />
          ) : (
            <a
              class="relative flex justify-center items-center overflow-hidden align-middle size-8 z-0 rounded-full bg-gradient-to-tr from-pink-500 to-yellow-500 active:brightness-90 active:scale-95 transition-[filter,_transform] duration-100"
              href="javascript:void(0)"
            >
              <span class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex items-center justify-center size-full text-white/80 dark:text-black/80">
                <User width="80%" height="80%" />
              </span>
            </a>
          )
        }
      </div>
    </div>
    <div
      class="hidden lg:flex justify-between items-center px-6 shadow-md rounded-xl text-link dark:text-link-dark-h bg-white dark:bg-wash-dark"
    >
      <ThemeToggle client:only="react" />
    </div>
  </nav>
</header>
<div
  id={MOBILE_MENU_CONTENT_ID}
  class="fixed top-0 bottom-0 right-0 z-[999] flex w-screen max-w-[310px] h-full flex-col items-center overflow-x-auto bg-white dark:bg-wash-full-dark lg:hidden px-8"
>
  <nav class="navContent size-full opacity-0 transition-opacity">
    <div class="flex flex-col justify-between size-full max-h-dvh">
      <div class="flex flex-col w-full text-link-h dark:text-link-dark-h">
        <div
          class="flex w-full h-auto py-5 border-b-1 border-gray-200 dark:border-wash-dark"
        >
          <div class="inline-flex flex-col items-start justify-center gap-2">
            {
              session?.user?.image ? (
                <a href="javascript:void(0)" aria-label="Perfil de usuario">
                  <img
                    class="size-8 rounded-full"
                    src={session?.user?.image}
                    alt="Avatar del usuario"
                  />
                </a>
              ) : (
                <a
                  class="relative flex justify-center items-center overflow-hidden align-middle size-8 z-0 rounded-full bg-gradient-to-tr from-pink-500 to-yellow-500 active:brightness-90 active:scale-95 transition-[filter,_transform] duration-100"
                  href="javascript:void(0)"
                >
                  <span class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex items-center justify-center size-full text-white/80 dark:text-black/80">
                    <User width="80%" height="80%" />
                  </span>
                </a>
              )
            }
            <a
              class="inline-flex flex-col items-start active:bg-gray-200 dark:active:bg-wash-dark transition-colors duration-100"
              href="javascript:void(0)"
            >
              <span class="font-medium text-inherit transition-none capitalize"
                >{normalizeName || "Usuario"}</span
              >
              <span
                class="text-sm text-link-m dark:text-link-dark-d transition-none"
                >{hasUsername}
              </span>
            </a>
          </div>
        </div>
        <hr class="border-none h-5" />
        {
          pages.map(({ name, href, active }, key) => (
            <>
              <a
                id={`navmob_link_${key + 1}`}
                class="relative flex items-center w-full py-3 capitalize navbar_link hover:text-bittersweet-400 dark:hover:text-cerise-red-400"
                href={href}
              >
                <span
                  class:list={[
                    "active-mobile-bar relative font-medium text-start",
                    { "current-page": active },
                    { "not-current": !active },
                  ]}
                >
                  {name}
                </span>
              </a>
            </>
          ))
        }
        <hr
          class="h-5 border-t-0 border-b-1 border-gray-200 dark:border-wash-dark"
        />
        <hr class="h-5 border-none" />
        <div class="subMenu group">
          <a
            class="relative flex items-center w-full py-3 font-medium"
            href="javascript:void(0)"
          >
            <Community class="mr-3" width="24" height="24" />
            Comunidad
            <div
              class="absolute right-0 top-1/2 -translate-y-1/2 w-4 h-2 bg-[url('/chevron.png')] bg-[size:100%_100%] transition-transform group-[.open]:rotate-180"
            >
            </div>
          </a>
          <div
            class="opacity-0 group-[.open]:opacity-100 h-0 group-[.open]:h-[176px] overflow-hidden transition-all"
          >
            <div class="flex flex-col pl-9">
              <a
                class="text-sm font-medium py-3 text-ellipsis whitespace-nowrap overflow-hidden"
                href="">Blog</a
              >
              <a
                class="text-sm font-medium py-3 text-ellipsis whitespace-nowrap overflow-hidden"
                href="">Grupos de apoyo</a
              >
              <a
                class="text-sm font-medium py-3 text-ellipsis whitespace-nowrap overflow-hidden"
                href="">Historias inspiradoras</a
              >
              <a
                class="text-sm font-medium py-3 text-ellipsis whitespace-nowrap overflow-hidden"
                href="">Recursos comunitarios</a
              >
            </div>
          </div>
        </div>
      </div>
      <footer class="flex flex-col w-full text-link-m dark:text-link-dark-m">
        <a class="relative flex items-center w-full py-5 text-sm" href="">
          <Settings class="mr-3" width="14" height="14" />
          Configuración
        </a>
        <a class="relative flex items-center w-full py-5 text-sm" href="">
          <Help class="mr-3" width="14" height="14" />
          Centro de Ayuda
        </a>
        <div class="w-full flex items-center justify-between py-3">
          <div class="flex flex-row items-center">
            <Theme class="mr-3" width="14" height="14" />
            <span class="text-sm">Tema</span>
          </div>
          <ThemeToggle
            buttonClass="dark:bg-wash-dark"
            spanClass="dark:bg-wash-full-dark"
            client:only="react"
          />
        </div>
        {
          session ? (
            <button
              id="logout"
              class="relative flex items-center w-full py-5 text-sm font-medium text-bittersweet-400 dark:text-cerise-red-600"
            >
              <Logout class="mr-3" width="14" height="14" />
              Cerrar sesión
            </button>
          ) : null
        }
      </footer>
    </div>
  </nav>
</div>

<style>
  .active-bar.current-page {
    color: rgb(250, 128, 114);
    &::after {
      transform: scale(1);
    }
  }

  .active-bar.current-page:is(.dark *) {
    color: rgb(234, 130, 153);
  }

  .active-mobile-bar.current-page {
    color: rgb(250, 128, 114);
  }

  .active-mobile-bar.current-page:is(.dark *) {
    color: rgb(234, 130, 153);
  }

  .active-bar::after {
    content: "";
    position: absolute;
    left: 0;
    bottom: 0px;
    width: 100%;
    height: 2px;
    background-color: currentColor;
    border-radius: 5px;
    transform: scale(0);
    transform-origin: right;
    transition: transform 0.5s;
  }

  .active-bar:hover::after {
    transform: scale(1);
    transform-origin: left;
  }

  #menuMobileContent {
    transform: translateX(100%);
    pointer-events: none;
    transition: transform 0.4s ease-in-out;
  }

  #menuMobileContent.open {
    transform: translateX(0) !important;
    pointer-events: all;
  }
</style>

<script>
  import { $ } from "@/lib/dom-selector";

  const { signOut } = await import("auth-astro/client");
  const $logout = $("#logout");
  const $avatarLogout = $("#avatar_logout");

  if ($logout) $logout.onclick = () => signOut();
  if ($avatarLogout) $avatarLogout.onclick = () => signOut();
</script>
<script>
  import { $ } from "@/lib/dom-selector";

  function toggleMenu(
    nav: HTMLElement | null,
    menuMobileContent: HTMLElement | null,
    navContent: HTMLElement | null
  ) {
    nav?.classList.toggle("open");
    menuMobileContent?.classList.toggle("open");
    navContent?.classList.toggle("opacity-100");
    document.body.classList.toggle("overflow-hidden");
    document.body.classList.toggle("lg:overflow-auto");
  }

  document.addEventListener("astro:page-load", () => {
    const nav = $("nav") as HTMLElement | null;
    const menuButton = $("#menuButton") as HTMLElement | null;
    const menuMobileContent = $("#menuMobileContent") as HTMLElement | null;
    const navContent = $(".navContent") as HTMLElement | null;

    let startX = 0;
    let startY = 0;
    const touchMargin = 50;

    function handleTouchStart(e: TouchEvent) {
      const touch = e.touches[0];
      startX = touch.clientX;
      startY = touch.clientY;
    }

    function handleTouchEnd(e: TouchEvent) {
      const touch = e.changedTouches[0];
      const deltaX = touch.clientX - startX;
      const deltaY = touch.clientY - startY;

      if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
        if (
          startX > window.innerWidth - touchMargin &&
          deltaX < 0 &&
          !menuMobileContent?.classList.contains("open")
        ) {
          menuButton?.dispatchEvent(new Event("click"));
        } else if (
          deltaX > 0 &&
          menuMobileContent?.classList.contains("open")
        ) {
          menuButton?.dispatchEvent(new Event("click"));
        }
      }
    }

    document.addEventListener("touchstart", handleTouchStart);
    document.addEventListener("touchend", handleTouchEnd);

    menuButton?.addEventListener("hamburgerButtonClicked", () =>
      toggleMenu(nav, menuMobileContent, navContent)
    );

    if (menuMobileContent?.classList.contains("open")) {
      toggleMenu(nav, menuMobileContent, navContent);
    }

    const subMenu = $(".subMenu") as HTMLElement | null;

    subMenu?.addEventListener("click", () => {
      subMenu?.classList.toggle("open");
    });
  });
</script>
