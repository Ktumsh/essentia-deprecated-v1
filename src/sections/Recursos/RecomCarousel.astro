---
import RecomCarouselItem from "./RecomCarouselItem.astro";
import { MAINCAP_RESOURCES } from "@/consts/recom-carousel";

const itemList = MAINCAP_RESOURCES;
---

<div id="recom_carousel" class="relative w-full">
  <!-- Carousel wrapper -->
  <div class="relative h-56 overflow-hidden rounded-xl md:h-96">
    <!-- Items -->
    {
      itemList
        .slice(0, 5)
        .map((item, index) => (
          <RecomCarouselItem
            id={`carousel-item-${index + 1}`}
            title={item.title}
            description={item.description}
            textBtn={item.textBtn}
            url={item.url}
            image={item.img}
            dataItem={index === 0 ? "active" : ""}
          />
        ))
    }
  </div>
  <!-- Slider indicators -->
  <div
    class="absolute z-30 flex -translate-x-1/2 space-x-3 rtl:space-x-reverse bottom-5 left-1/2"
  >
    {
      itemList
        .slice(0, 5)
        .map((_, index) => (
          <button
            type="button"
            id={`carousel-indicator-${index + 1}`}
            class="w-3 h-3 rounded-full shadow-sm shadow-black/30 transition-colors"
            aria-current={index === 0 ? "true" : "false"}
            aria-label={`Slide ${index + 1}`}
            data-carousel-slide-to={`${index}`}
          />
        ))
    }
  </div>
  <!-- Slider controls -->
  <button
    type="button"
    id="maincap-prev"
    class="absolute top-0 start-0 z-30 flex items-center justify-center h-full px-2 sm:px-4 cursor-pointer group focus:outline-none"
  >
    <span
      class="inline-flex items-center justify-center w-10 h-20 rounded-xl bg-black/30 group-hover:bg-white dark:group-hover:bg-base-dark group-focus:ring-0 group-focus:outline-none"
    >
      <svg
        class="w-4 h-4 text-white rotate-180 mr-1 group-hover:text-base-color dark:group-hover:text-white"
        version="1.1"
        id="Layer_1"
        xmlns="http://www.w3.org/2000/svg"
        x="0px"
        y="0px"
        viewBox="0 0 50 100"
        ><polygon
          fill="currentColor"
          points="0,0.093 0,25.702 24.323,50.026 0,74.349 0,99.955 49.929,50.026 "
        ></polygon>
      </svg>
      <span class="sr-only">Previous</span>
    </span>
  </button>
  <button
    type="button"
    id="maincap-next"
    class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-2 sm:px-4 cursor-pointer group focus:outline-none"
  >
    <span
      class="inline-flex items-center justify-center w-10 h-20 rounded-xl bg-black/30 group-hover:bg-white dark:group-hover:bg-base-dark group-focus:ring-0 group-focus:outline-none"
    >
      <svg
        class="w-4 h-4 text-white ml-1 group-hover:text-base-color dark:group-hover:text-white"
        version="1.1"
        id="Layer_1"
        xmlns="http://www.w3.org/2000/svg"
        x="0px"
        y="0px"
        viewBox="0 0 50 100"
        ><polygon
          fill="currentColor"
          points="0,0.093 0,25.702 24.323,50.026 0,74.349 0,99.955 49.929,50.026 "
        ></polygon>
      </svg>
      <span class="sr-only">Next</span>
    </span>
  </button>
</div>
<script>
  import { Carousel } from "flowbite";
  import type {
    CarouselItem,
    CarouselOptions,
    CarouselInterface,
  } from "flowbite";
  import type { InstanceOptions } from "flowbite";

  document.addEventListener("astro:page-load", () => {
    const carouselElement: HTMLElement | null =
      document.getElementById("recom_carousel");

    const items: CarouselItem[] = [];
    const indicators: CarouselItem[] = [];

    document.querySelectorAll('[id^="carousel-item-"]').forEach((el, index) => {
      items.push({
        position: index,
        el: el as HTMLElement,
      });
    });

    document
      .querySelectorAll('[id^="carousel-indicator-"]')
      .forEach((el, index) => {
        indicators.push({
          position: index + 1,
          el: el as HTMLElement,
        });
      });

    const options: CarouselOptions = {
      defaultPosition: 0,
      interval: 8000,
      indicators: {
        activeClasses: "bg-white dark:bg-base-dark",
        inactiveClasses:
          "bg-white/50 dark:bg-base-dark/50 hover:bg-white dark:hover:bg-base-dark",
        items: indicators,
      },
    };

    const instanceOptions: InstanceOptions = {
      id: "recom_carousel",
      override: true,
    };

    const carousel: CarouselInterface = new Carousel(
      carouselElement,
      items,
      options,
      instanceOptions
    );

    carousel.cycle();

    carouselElement?.addEventListener("mouseenter", () => {
      carousel.pause();
    });

    carouselElement?.addEventListener("mouseleave", () => {
      carousel.cycle();
    });

    const $prevButton = document.getElementById("maincap-prev");
    const $nextButton = document.getElementById("maincap-next");

    $prevButton?.addEventListener("click", () => {
      carousel.prev();
      carousel.pause();
    });

    $nextButton?.addEventListener("click", () => {
      carousel.next();
      carousel.pause();
    });
  });
</script>
